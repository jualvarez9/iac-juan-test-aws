name: ArgoCD Test
on:
  push:
    paths:
      - 'test-app/**'
      - 'argocd/**'
  workflow_dispatch:

jobs:
  argocd-test:
    runs-on: [self-hosted, k3s, aws]
    steps:
    - uses: actions/checkout@v3
    
    - name: Install kubectl
      run: |
        echo "üîß Installing kubectl..."
        
        # Verificar si ya est√° instalado
        if command -v kubectl &> /dev/null; then
          echo "kubectl already installed"
          kubectl version --client
        else
          echo "Downloading and installing kubectl..."
          curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
          chmod +x kubectl
          sudo mv kubectl /usr/local/bin/
          echo "kubectl installed successfully"
        fi
        
        # Verificar instalaci√≥n
        kubectl version --client
    
    - name: Configure kubectl
      run: |
        echo "‚öôÔ∏è Configuring kubectl..."
        
        # Crear directorio kubeconfig
        mkdir -p ~/.kube
        
        # Copiar configuraci√≥n de K3s (desde el host)
        if [ -f /etc/rancher/k3s/k3s.yaml ]; then
          sudo cp /etc/rancher/k3s/k3s.yaml ~/.kube/config
          sudo chown $(whoami):$(whoami) ~/.kube/config
          chmod 600 ~/.kube/config
          echo "Kubeconfig configured from K3s"
        else
          echo "‚ùå K3s config not found. Trying alternative..."
          # Si el runner est√° en un pod, puede que necesites usar service account
          echo "Using in-cluster config..."
        fi
        
        # Verificar conexi√≥n
        kubectl cluster-info
        kubectl get nodes
    
    - name: Check System Resources
      run: |
        echo "üìä Checking system resources..."
        free -h
        df -h /
        
        available_mem=$(free -m | awk 'NR==2{print $7}')
        echo "Available memory: ${available_mem}MB"
        
        if [ $available_mem -lt 150 ]; then
          echo "‚ö†Ô∏è Low memory warning. Cleaning up..."
          sudo sync && sudo sysctl vm.drop_caches=3 || echo "Cannot clean cache"
          kubectl delete pods --field-selector=status.phase=Succeeded --all-namespaces || true
          kubectl delete pods --field-selector=status.phase=Failed --all-namespaces || true
        fi
    
    - name: Install ArgoCD
      run: |
        echo "üöÄ Installing ArgoCD..."
        
        # Crear namespace
        kubectl create namespace argocd --dry-run=client -o yaml | kubectl apply -f -
        
        # Instalar ArgoCD Core (m√°s ligero para t2.micro)
        kubectl apply -n argocd -f https://raw.githubusercontent.com/argoproj/argo-cd/stable/manifests/core-install.yaml
        
        echo "‚è≥ Waiting for ArgoCD to be ready..."
        kubectl wait --for=condition=available --timeout=300s deployment/argocd-server -n argocd
        
        echo "‚úÖ ArgoCD installed successfully!"
        kubectl get pods -n argocd
    
    - name: Deploy Test Application
      run: |
        echo "üì¶ Deploying test application via ArgoCD..."
        
        # Aplicar la aplicaci√≥n ArgoCD
        kubectl apply -f argocd/test-app.yaml
        
        echo "‚è≥ Waiting for application sync..."
        sleep 30
        
        echo "üìã ArgoCD Applications:"
        kubectl get applications -n argocd
        
        echo "üìã All Pods:"
        kubectl get pods --all-namespaces
        
        echo "üìã Services:"
        kubectl get services
    
    - name: Verify Deployment
      run: |
        echo "üîç Verifying deployment..."
        
        # Esperar a que el deployment est√© listo
        if kubectl get deployment test-nginx >/dev/null 2>&1; then
          kubectl wait --for=condition=available --timeout=180s deployment/test-nginx || true
          echo "‚úÖ Test nginx deployment is ready"
        else
          echo "‚ö†Ô∏è Test nginx deployment not found yet"
        fi
        
        # Mostrar estado final
        kubectl get pods -l app=test-nginx
        kubectl describe service test-nginx || echo "Service not ready yet"
    
    - name: Show Access Information
      run: |
        echo "üåê Access Information:"
        
        # Obtener IP externa
        EXTERNAL_IP=$(curl -s ifconfig.me || echo "IP_NOT_AVAILABLE")
        echo "External IP: $EXTERNAL_IP"
        
        # Mostrar URLs de acceso
        echo "üì± Test App: http://$EXTERNAL_IP:30081"
        
        # Informaci√≥n de ArgoCD (si se expone)
        echo "üéõÔ∏è ArgoCD Server: kubectl port-forward svc/argocd-server -n argocd 8080:443"
        
        echo ""
        echo "=== FINAL STATUS ==="
        kubectl get pods --all-namespaces | grep -E "(argocd|test-nginx)" || echo "Pods not ready yet"