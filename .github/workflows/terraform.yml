name: 'Terraform IAC AWS Workflow'

on:
  push:
    branches: [ "main" ]
  workflow_dispatch:

permissions:
  contents: read

jobs:
  terraform:
    name: 'Terraform'
    runs-on: [self-hosted, k3s, aws]
    environment: production

    defaults:
      run:
        shell: bash

    env:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      COMMIT_MESSAGE: ${{ github.event.head_commit.message }}
      TERRAFORM_VERSION: "1.6.6"
        
    steps:
    - name: Aggressive Cleanup
      run: |
        echo "=== LIMPIEZA AGRESIVA DE ESPACIO ==="
        df -h
        
        # Limpiar cache de GitHub Actions
        sudo rm -rf /opt/actions-runner/_work/_actions/ 2>/dev/null || true
        sudo rm -rf /opt/actions-runner/_work/_temp/ 2>/dev/null || true
        
        # Limpiar archivos temporales
        sudo find /tmp -type f -delete 2>/dev/null || true
        sudo find /var/tmp -type f -delete 2>/dev/null || true
        
        # Limpiar caches de Terraform
        sudo find / -name ".terraform" -type d -exec rm -rf {} + 2>/dev/null || true
        sudo find / -name "terraform.tfstate*" -type f -delete 2>/dev/null || true
        
        # Limpiar Docker/Containerd
        sudo crictl rmi --prune 2>/dev/null || true
        sudo crictl system prune -f 2>/dev/null || true
        
        # Limpiar logs
        sudo find /var/log -name "*.log" -size +10M -delete 2>/dev/null || true
        
        # Limpiar caches del sistema
        sudo yum clean all 2>/dev/null || true
        
        echo "=== Espacio después de limpieza agresiva ==="
        df -h
        
        # Verificar espacio disponible
        AVAILABLE=$(df / | awk 'NR==2 {print $4}')
        if [ $AVAILABLE -lt 1048576 ]; then
          echo "ERROR: Aún no hay suficiente espacio libre. Disponible: ${AVAILABLE}KB"
          echo "Se requieren al menos 1GB libres para continuar"
          exit 1
        fi
        echo "✅ Espacio suficiente disponible: ${AVAILABLE}KB"

    - name: Manual Checkout
      run: |
        echo "=== CHECKOUT MANUAL DEL REPOSITORIO ==="
        cd ${{ github.workspace }}
        
        # Mostrar directorio actual
        echo "Directorio de trabajo: $(pwd)"
        
        # Limpiar directorio completamente
        sudo rm -rf .git 2>/dev/null || true
        sudo rm -rf * 2>/dev/null || true
        sudo rm -rf .[^.]* 2>/dev/null || true
        
        # Configurar Git si es necesario
        git config --global --add safe.directory $(pwd)
        
        # Clonar el repositorio
        echo "Clonando repositorio: ${{ github.repository }}"
        git clone https://github.com/${{ github.repository }}.git .
        
        # Checkout al commit específico
        echo "Cambiando a commit: ${{ github.sha }}"
        git checkout ${{ github.sha }}
        
        echo "=== ARCHIVOS DESCARGADOS ==="
        ls -la
        
        echo "=== VERIFICAR ARCHIVOS TERRAFORM ==="
        find . -name "*.tf" -o -name "*.tfvars" | head -10

    - name: Install Terraform
      run: |
        if command -v terraform &> /dev/null; then
          echo "Terraform ya está instalado: $(terraform version)"
          exit 0
        fi
        
        echo "Instalando Terraform ${TERRAFORM_VERSION}..."
        
        cd /tmp
        curl -fsSL "https://releases.hashicorp.com/terraform/${TERRAFORM_VERSION}/terraform_${TERRAFORM_VERSION}_linux_amd64.zip" -o terraform.zip
        unzip -q terraform.zip
        sudo mv terraform /usr/local/bin/
        sudo chmod +x /usr/local/bin/terraform
        rm -f terraform.zip
        
        terraform version
        echo "✅ Terraform instalado correctamente"

    - name: Terraform Init with Space Management
      working-directory: ${{ github.workspace }}
      run: |
        echo "=== ESPACIO ANTES DE INIT ==="
        df -h
        
        # Limpiar cualquier cache previo
        rm -rf .terraform* terraform.tfstate* 2>/dev/null || true
        
        # Configurar cache de plugins optimizado
        export TF_PLUGIN_CACHE_DIR="/tmp/terraform-plugin-cache"
        mkdir -p "$TF_PLUGIN_CACHE_DIR"
        
        echo "=== INICIALIZANDO TERRAFORM ==="
        terraform init -no-color -upgrade=false
        
        echo "=== ESPACIO DESPUÉS DE INIT ==="
        df -h

    - name: Extract tfvars desde el commit
      id: extract_tfvars
      working-directory: ${{ github.workspace }}
      run: |
        TFVARS_FILE=$(echo "${COMMIT_MESSAGE}" | grep -o '\S*\.tfvars' || echo "")
        if [ -z "$TFVARS_FILE" ]; then
          echo "No se encontró archivo .tfvars en el mensaje del commit"
          echo "TFVARS_FILE=" >> $GITHUB_OUTPUT
        else
          echo "Archivo tfvars encontrado: $TFVARS_FILE"
          if [ -f "$TFVARS_FILE" ]; then
            echo "✅ Archivo $TFVARS_FILE existe"
            echo "TFVARS_FILE=$TFVARS_FILE" >> $GITHUB_OUTPUT
          else
            echo "⚠️ ADVERTENCIA: Archivo $TFVARS_FILE no existe"
            echo "TFVARS_FILE=" >> $GITHUB_OUTPUT
          fi
        fi

    - name: Terraform Format
      working-directory: ${{ github.workspace }}
      run: terraform fmt

    - name: Terraform Plan
      working-directory: ${{ github.workspace }}
      run: |
        echo "=== ESPACIO ANTES DE PLAN ==="
        df -h
        
        if [ -n "${{ steps.extract_tfvars.outputs.TFVARS_FILE }}" ]; then
          echo "Ejecutando plan con archivo: ${{ steps.extract_tfvars.outputs.TFVARS_FILE }}"
          terraform plan -input=false -var-file=${{ steps.extract_tfvars.outputs.TFVARS_FILE }}
        else
          echo "Ejecutando plan sin archivo tfvars específico"
          terraform plan -input=false
        fi

    - name: Terraform Apply
      if: contains(github.event.head_commit.message, 'deploy') && !contains(github.event.head_commit.message, 'destroy')
      working-directory: ${{ github.workspace }}
      run: |
        echo "=== ESPACIO ANTES DE APPLY ==="
        df -h
        
        if [ -n "${{ steps.extract_tfvars.outputs.TFVARS_FILE }}" ]; then
          echo "Ejecutando apply con archivo: ${{ steps.extract_tfvars.outputs.TFVARS_FILE }}"
          terraform apply -auto-approve -var-file=${{ steps.extract_tfvars.outputs.TFVARS_FILE }}
        else
          echo "Ejecutando apply sin archivo tfvars específico"
          terraform apply -auto-approve
        fi

    - name: Terraform Destroy
      if: contains(github.event.head_commit.message, 'destroy') && !contains(github.event.head_commit.message, 'deploy')
      working-directory: ${{ github.workspace }}
      run: |
        if [ -n "${{ steps.extract_tfvars.outputs.TFVARS_FILE }}" ]; then
          echo "Ejecutando destroy con archivo: ${{ steps.extract_tfvars.outputs.TFVARS_FILE }}"
          terraform destroy -auto-approve -var-file=${{ steps.extract_tfvars.outputs.TFVARS_FILE }}
        else
          echo "Ejecutando destroy sin archivo tfvars específico"
          terraform destroy -auto-approve
        fi

    - name: Final Cleanup
      if: always()
      run: |
        echo "=== LIMPIEZA FINAL ==="
        # Limpiar cache de plugins de Terraform
        rm -rf /tmp/terraform-plugin-cache 2>/dev/null || true
        rm -rf .terraform* 2>/dev/null || true
        # Limpiar archivos temporales
        sudo find /tmp -name "*terraform*" -delete 2>/dev/null || true
        echo "=== ESPACIO FINAL ==="
        df -h