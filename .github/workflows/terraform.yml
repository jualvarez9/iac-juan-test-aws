name: 'Terraform IAC AWS Workflow'

on:
  push:
    branches: [ "main" ]
  
  workflow_dispatch:


permissions:
  contents: read
  


jobs:
  terraform:
    name: 'Terraform'
    runs-on: [self-hosted, k3s, aws]  # ← CAMBIO AQUÍd
    environment: production

    defaults:
      run:
        shell: bash

    env:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      COMMIT_MESSAGE: ${{ github.event.head_commit.message }}
        
    steps:
    # Bajamos el codigo del repo al runner
    - name: Checkout
      uses: actions/checkout@v4
    - name: Clean up disk space
      run: |
        echo "=== Espacio antes de limpiar ==="
        df -h
        
        echo "=== Limpiando cache de Terraform ==="
        rm -rf ~/.terraform*
        rm -rf .terraform*
        rm -rf /tmp/terraform*
        
        echo "=== Limpiando cache de sistema ==="
        sudo apt-get clean 2>/dev/null || yum clean all 2>/dev/null || true
        
        echo "=== Limpiando archivos temporales ==="
        find /tmp -type f -atime +1 -delete 2>/dev/null || true
        
        echo "=== Espacio después de limpiar ==="
        df -h
        
    # Instalamos Terraform en el runner
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v1

    # Inicializar Terraform
    - name: Terraform Init
      run: terraform init

    - name: Extract tfvars desde el commit
      id: extract_tfvars
      run: |
        TFVARS_FILE=$(echo "${COMMIT_MESSAGE}" | grep -o '\S*\.tfvars')
        echo "TFVARS_FILE=$TFVARS_FILE" >> $GITHUB_OUTPUT

        
    # Formatear codigo
    - name: Terraform Format
      run: terraform fmt

    # Generates an execution plan for Terraform
    - name: Terraform Plan
      run: terraform plan -input=false -var-file=${{ steps.extract_tfvars.outputs.TFVARS_FILE }}

    # Apply the Terraform plan
    - name: Terraform Apply
      if: contains(github.event.head_commit.message, 'deploy') && !contains(github.event.head_commit.message, 'destroy')
      run: terraform apply -auto-approve -var-file=${{ steps.extract_tfvars.outputs.TFVARS_FILE }}

    # Destroy the Terraform-managed infrastructure
    - name: Terraform Destroy
      if: contains(github.event.head_commit.message, 'destroy') && !contains(github.event.head_commit.message, 'deploy')
      run: terraform destroy -auto-approve -var-file=${{ steps.extract_tfvars.outputs.TFVARS_FILE }}